#!/usr/bin/env python3

import os
import argparse
import sys
import functools

rootpath = os.path.join(os.path.dirname(os.path.realpath(__file__)), "..", "src")
sys.path.append(rootpath)

import bootloader

parser = argparse.ArgumentParser(
        usage   = "%(prog)s [options] -i BOARD_ID -f FILE")
parser.add_argument('--version', action='version', version=bootloader.bootloader.version)
parser.add_argument("-f", "--file", dest="filename", metavar="FILE",
        help="AVR .hex File")
parser.add_argument("-p", "--port", dest="port",
        default="/dev/ttyUSB0",
        help="serial port (default is '/dev/ttyUSB0')")
parser.add_argument("-b", "--baud", dest="baudrate", 
         default="115200",
         help="baudrate (default is '115200')")
parser.add_argument("-i", "--id", dest="id", help="id of the board to program")
parser.add_argument("-e", "--erase", action="count", help="erase Chip befor programming")
parser.add_argument("-a", "--application", action="count", dest="start_app", 
        help="start Application (only evaluated if FILE is not specified)")
parser.add_argument("-c", "--config", action="count", 
        help="prints the configuration of the bootloader")
parser.add_argument("-d", "--debug", action="count",
         help="prints additional debug information while sending the programm")
parser.add_argument("-t", "--type", dest="type", default="can2usb",
        help="Select type of CAN adapter ('can2usb' or 'shell')")

args = parser.parse_args()

if not args.filename or not args.id:
    print(parser.get_usage())
    exit(1)

board_id = int(args.id, 0)
debug_mode = True if (args.debug) else False

print("CAN Bootloader\n")
print("Port      : %s" % args.port)
print("Board Id  : %i (0x%02x)" % (board_id, board_id))
if debug_mode:
    print("debug mode active!")

print("File      : %s" % args.filename)

hexfile = bootloader.util.intelhex.IntelHexParser(args.filename)
if len(hexfile.segments) > 1:
    print("            File has %i segments %s bytes" % (len(hexfile.segments), map(lambda x: len(x), hexfile.segments)))

print("Size      : %i Bytes" % functools.reduce(lambda x,y: x + y, map(lambda x: len(x), hexfile.segments)))

# create a connection to the can bus
if args.type == "can2usb":
    print("Interface : CAN2USB\n")
    interface = bootloader.can.Usb2Can(port = args.port, 
                            baud = int(args.baudrate, 10),
                            debug = debug_mode)
elif args.type == "shell":
    print("Interface : CAN Debugger\n")
    interface = bootloader.can.CanDebugger(port = args.port, 
                            baud = int(args.baudrate, 10),
                            debug = debug_mode)
else:
    print("Error: Unknown interface type: '%s'" % args.type)
    exit(1)

interface.connect()

try:
    client = bootloader.bootloader.CommandlineClient(board_id, interface, debug = debug_mode)
    client.program(hexfile.segments)
except bootloader.bootloader.BootloaderException as msg:
    print("Error: %s" % msg)
except KeyboardInterrupt as msg:
    print("Abort!")
finally:
    interface.disconnect()
